// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/person/interfaces.go

package usecase_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/diogoalbuquerque/migration-customers/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockPersonMYSQLRepo is a mock of PersonMYSQLRepo interface.
type MockPersonMYSQLRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPersonMYSQLRepoMockRecorder
}

// MockPersonMYSQLRepoMockRecorder is the mock recorder for MockPersonMYSQLRepo.
type MockPersonMYSQLRepoMockRecorder struct {
	mock *MockPersonMYSQLRepo
}

// NewMockPersonMYSQLRepo creates a new mock instance.
func NewMockPersonMYSQLRepo(ctrl *gomock.Controller) *MockPersonMYSQLRepo {
	mock := &MockPersonMYSQLRepo{ctrl: ctrl}
	mock.recorder = &MockPersonMYSQLRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonMYSQLRepo) EXPECT() *MockPersonMYSQLRepoMockRecorder {
	return m.recorder
}

// GetBucketsAvailable mocks base method.
func (m *MockPersonMYSQLRepo) GetBucketsAvailable() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketsAvailable")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetBucketsAvailable indicates an expected call of GetBucketsAvailable.
func (mr *MockPersonMYSQLRepoMockRecorder) GetBucketsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketsAvailable", reflect.TypeOf((*MockPersonMYSQLRepo)(nil).GetBucketsAvailable))
}

// StorePeople mocks base method.
func (m *MockPersonMYSQLRepo) StorePeople(ctx context.Context, people []entity.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePeople", ctx, people)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePeople indicates an expected call of StorePeople.
func (mr *MockPersonMYSQLRepoMockRecorder) StorePeople(ctx, people interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePeople", reflect.TypeOf((*MockPersonMYSQLRepo)(nil).StorePeople), ctx, people)
}
